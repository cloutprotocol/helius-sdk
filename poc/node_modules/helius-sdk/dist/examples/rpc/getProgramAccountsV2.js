"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../src"); // Replace with 'helius-sdk' in a production setting
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        var _a;
        const helius = new src_1.Helius('YOUR_API_KEY');
        // Example 1: Basic query with pagination
        console.log('\n=== Example 1: Basic query with pagination ===');
        const firstPage = yield helius.rpc.getProgramAccountsV2('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', {
            encoding: 'jsonParsed',
            limit: 10
        });
        console.log(`Fetched ${firstPage.count} accounts`);
        console.log(`Pagination key: ${firstPage.paginationKey}`);
        console.log(`First account: ${(_a = firstPage.accounts[0]) === null || _a === void 0 ? void 0 : _a.pubkey}`);
        // Example 2: Continue pagination if more results exist
        if (firstPage.paginationKey) {
            console.log('\n=== Example 2: Fetching next page ===');
            const secondPage = yield helius.rpc.getProgramAccountsV2('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', {
                encoding: 'jsonParsed',
                limit: 10,
                paginationKey: firstPage.paginationKey
            });
            console.log(`Fetched ${secondPage.count} more accounts`);
            console.log(`Next pagination key: ${secondPage.paginationKey}`);
        }
        // Example 3: Using filters to get specific accounts
        console.log('\n=== Example 3: Using filters for token accounts ===');
        const tokenAccounts = yield helius.rpc.getProgramAccountsV2('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', {
            encoding: 'jsonParsed',
            limit: 5,
            filters: [
                { dataSize: 165 }, // Filter for token accounts (165 bytes)
            ]
        });
        console.log(`Found ${tokenAccounts.count} token accounts`);
        tokenAccounts.accounts.forEach(account => {
            var _a, _b;
            const parsed = (_a = account.account.data) === null || _a === void 0 ? void 0 : _a.parsed;
            if (parsed === null || parsed === void 0 ? void 0 : parsed.info) {
                console.log(`  Token account ${account.pubkey.substring(0, 8)}... with mint: ${(_b = parsed.info.mint) === null || _b === void 0 ? void 0 : _b.substring(0, 8)}...`);
            }
        });
        // Example 4: Get accounts changed since a specific slot (incremental updates)
        console.log('\n=== Example 4: Incremental updates with changedSinceSlot ===');
        const recentSlot = 363340000; // Replace with a recent slot
        const changedAccounts = yield helius.rpc.getProgramAccountsV2('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', {
            encoding: 'jsonParsed',
            limit: 5,
            changedSinceSlot: recentSlot
        });
        console.log(`Found ${changedAccounts.count} accounts changed since slot ${recentSlot}`);
        // Example 5: Auto-pagination to get all accounts (use with caution!)
        console.log('\n=== Example 5: Auto-pagination (limited for demo) ===');
        const allAccounts = yield helius.rpc.getAllProgramAccounts('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', {
            encoding: 'jsonParsed',
            // Note: limit is not configurable for getAllProgramAccounts - it always uses 10000 internally
            filters: [
                { dataSize: 82 }, // Filter for mint accounts (82 bytes) to reduce results
            ]
        });
        console.log(`Total accounts fetched: ${allAccounts.length}`);
        // Example 6: Using memcmp filter to find accounts with specific data
        console.log('\n=== Example 6: Using memcmp filter ===');
        const specificOwner = '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY';
        const memcmpAccounts = yield helius.rpc.getProgramAccountsV2('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA', {
            encoding: 'base64',
            limit: 5,
            filters: [
                { dataSize: 165 },
                {
                    memcmp: {
                        offset: 32, // Owner field in token account
                        bytes: specificOwner
                    }
                }
            ]
        });
        console.log(`Found ${memcmpAccounts.count} accounts owned by ${specificOwner.substring(0, 8)}...`);
    });
}
main().catch((err) => {
    console.error('Example failed:', err);
    process.exit(1);
});
